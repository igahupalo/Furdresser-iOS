//
//  LoginViewController.swift
//  Furdresser
//
//  Created by Iga Hupalo on 24/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit
import Foundation
import MaterialComponents.MaterialTextControls_OutlinedTextFields

protocol LoginViewControllerInput {
    
}

protocol LoginViewControllerOutput {
    func validateEmail(request: ValidateEmail.Request)
    func validatePassword(request: ValidatePassword.Request)
    func logIn(request: LogIn.Request)
}

class LoginViewController: UIViewController, LoginViewControllerInput {

    // MARK: - Outlets

    @IBOutlet weak var topCircleView: UIView!
    @IBOutlet weak var topRingView: UIView!
    @IBOutlet weak var bottomRingView: UIView!
    @IBOutlet weak var bottomCircleView: UIView!

    @IBOutlet weak var logInHeaderLabel: UILabel!
    @IBOutlet weak var emailTextField: MDCOutlinedTextField!
    @IBOutlet weak var passwordTextField: MDCOutlinedTextField!
    @IBOutlet weak var loginButton: RoundedButton!

    var output: LoginViewControllerOutput?
    var router: LoginRouter?

    private var shouldCleanAllErrors = false

    private var hasErrorEmail = true {
        didSet {
            loginButton.isEnabled = !hasErrorEmail && !hasErrorPassword
        }
    }
    private var hasErrorPassword = true {
        didSet {
            loginButton.isEnabled = !hasErrorEmail && !hasErrorPassword
        }
    }
    
    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        LoginConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
    }

    // MARK: Routing
    
    // MARK: Requests
    
    // MARK: Display logic

    @IBAction func emailEditingDidBegin(_ sender: Any) {
        if hasErrorEmail {
            emailTextField.clearError()
            hasErrorEmail = false
        }
        if shouldCleanAllErrors {
            passwordTextField.clearError()
            hasErrorPassword = false
            shouldCleanAllErrors = false
        }
    }

    @IBAction func passwordEditingDidBegin(_ sender: Any) {
        if hasErrorPassword {
            passwordTextField.clearError()
            hasErrorPassword = false
        }
        if shouldCleanAllErrors {
            emailTextField.clearError()
            hasErrorEmail = false
            shouldCleanAllErrors = false
        }
    }

    @IBAction func emailEditingDidEnd(_ sender: Any) {
        let request = ValidateEmail.Request(email: emailTextField.text)
        output?.validateEmail(request: request)
    }

    @IBAction func passwordEditingDidEnd(_ sender: Any) {
        let request = ValidatePassword.Request(password: passwordTextField.text)
        output?.validatePassword(request: request)
    }

    @IBAction func didTapLoginButton(_ sender: Any) {
        if let email = emailTextField.text,
           let password = passwordTextField.text {
            shouldCleanAllErrors = true
            output?.logIn(request: LogIn.Request(email: email, password: password))
        }
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there

extension LoginViewController: LoginPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }

    func setEmailError(message: String?) {
        if let message = message {
            hasErrorEmail = true
            emailTextField.setError(message: message)
        }
    }

    func setPasswordError(message: String?) {
        if let message = message {
            hasErrorPassword = true
            passwordTextField.setError(message: message)
        }
    }
}

private extension LoginViewController {

    func setupUI() {
        setupBackground()
        setupTextFields()

        loginButton.isEnabled = false
    }

    func setupBackground() {
        let primaryColor = (UIColor(named: "Primary") ?? #colorLiteral(red: 0.2196078449, green: 0.007843137719, blue: 0.8549019694, alpha: 1)).cgColor
        let primaryDarkColor = (UIColor(named: "PrimaryDark") ?? #colorLiteral(red: 0.09019608051, green: 0, blue: 0.3019607961, alpha: 1)).cgColor
        let borderColor = (UIColor(named: "White15") ?? #colorLiteral(red: 0.9999960065, green: 1, blue: 1, alpha: 0.15)).cgColor

        view.applyGradient(colors: [primaryDarkColor, primaryColor],
                           angle: 0.7)
        topCircleView.setCircleShape()
        topRingView.setCircleShape(borderColor: borderColor, borderWidth: 30)
        bottomCircleView.setCircleShape()
        bottomRingView.setCircleShape(borderColor: borderColor, borderWidth: 50)
    }

    func setupTextFields() {
        emailTextField.label.text = NSLocalizedString("email", comment: "")
        passwordTextField.label.text = NSLocalizedString("password", comment: "")

        emailTextField.setup()
        passwordTextField.setup()
        passwordTextField.isSecureTextEntry = true
        passwordTextField.setupSecureEntryButton()
    }
}
