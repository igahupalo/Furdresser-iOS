//
//  AppointmentsPresenter.swift
//  Furdresser
//
//  Created by Iga Hupalo on 24/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import Foundation
import UIKit

protocol AppointmentsPresenterInput {
    
}

protocol AppointmentsPresenterOutput: AnyObject {
    func presentFetchedAppointments(viewModel: AppointmentsScene.FetchAppointments.ViewModel)
    func setupDisplayMode(viewModel: AppointmentsScene.ProvideDisplayMode.ViewModel)
}

class AppointmentsPresenter: AppointmentsPresenterInput {
    
    weak var output: AppointmentsPresenterOutput?
    
    // MARK: Presentation logic

    func presentFetchedAppointments(response: AppointmentsScene.FetchAppointments.Response) {
        let viewModel = mapResponseToViewModel(response: response)

        output?.presentFetchedAppointments(viewModel: viewModel)
    }

    func setDisplayMode(response: AppointmentsScene.ProvideDisplayMode.Response) {
        var displayMode: AppointmentsScene.ProvideDisplayMode.ViewModel.DisplayMode
        switch response.role {
        case .groomer:
            displayMode = .groomer
        case .manager:
            displayMode = .manager
        }

        output?.setupDisplayMode(viewModel: AppointmentsScene.ProvideDisplayMode.ViewModel(displayMode: displayMode))
    }
}

private extension AppointmentsPresenter {
    func mapResponseToViewModel(response: AppointmentsScene.FetchAppointments.Response) -> AppointmentsScene.FetchAppointments.ViewModel {
        let userSectionHeaders = mapDatesToSectionHeaders(dates: response.groupedUserAppointments.map { $0.0 })
        let userSectionedAppointments = mapAppointmentsToSectionedAppointments(appointments: response.groupedUserAppointments.map { $0.1 })

        var allSectionHeaders: [String]?
        var allSectionedAppointments: [[AppointmentsScene.FetchAppointments.ViewModel.DisplayedAppointment]]?

        if let groupedAllAppointments = response.groupedAllAppointments {
            allSectionHeaders = mapDatesToSectionHeaders(dates: groupedAllAppointments.map { $0.0 })
            allSectionedAppointments = mapAppointmentsToSectionedAppointments(appointments: groupedAllAppointments.map { $0.1 })
        }

        let viewModel = AppointmentsScene.FetchAppointments.ViewModel(userSectionHeaders: userSectionHeaders,
                                                                      userSectionedAppointments: userSectionedAppointments,
                                                                      allSectionHeaders: allSectionHeaders,
                                                                      allSectionedAppointments: allSectionedAppointments)

        return viewModel
    }

    func mapDatesToSectionHeaders(dates: [Date]) -> [String] {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "dd/MM/yyyy (EEEE)"

        let sectionHeaders: [String] = dates.map {
            let dateString = dateFormatter.string(from: $0)
            return dateString
        }

        return sectionHeaders
    }

    func mapAppointmentsToSectionedAppointments(appointments: [[Appointment]]) -> [[AppointmentsScene.FetchAppointments.ViewModel.DisplayedAppointment]] {
        appointments.map { $0.map { mapAppointmentToDisplayedAppointment(appointment: $0) } }
    }

    func mapAppointmentToDisplayedAppointment(appointment: Appointment) -> AppointmentsScene.FetchAppointments.ViewModel.DisplayedAppointment {

        let timeFormatter = DateFormatter()
        timeFormatter.dateFormat = "HH:mm"

        let startTime = timeFormatter.string(from: appointment.startDate ?? Date())
        let endTime = timeFormatter.string(from: appointment.endDate ?? Date())
        let timeString = startTime + " - " + endTime
        let ageString = appointment.age?.mapToLocalizedAgeString()
        let weightString = appointment.weight?.mapToLocalizedWeightString()

        return AppointmentsScene.FetchAppointments.ViewModel.DisplayedAppointment(image: appointment.image,
                                                                              time: timeString,
                                                                              petName: appointment.name ?? "",
                                                                              ownerName: appointment.ownerName ?? "",
                                                                              weight: weightString ?? "",
                                                                              age: ageString ?? "")
    }
}
