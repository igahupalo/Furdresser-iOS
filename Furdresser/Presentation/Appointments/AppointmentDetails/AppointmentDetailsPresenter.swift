//
//  AppointmentDetailsPresenter.swift
//  Furdresser
//
//  Created by Iga Hupalo on 24/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import Foundation
import UIKit

protocol AppointmentDetailsPresenterInput {
    
}

protocol AppointmentDetailsPresenterOutput: AnyObject {
    func presentFetchedAppointment(viewModel: AppointmentDetailsScene.FetchAppointmentDetails.ViewModel)
    func toggleTaskButton(viewModel: AppointmentDetailsScene.ToggleTask.ViewModel)
    func makeCall(viewModel: AppointmentDetailsScene.MakeCall.ViewModel)
    func sendMessage(viewModel: AppointmentDetailsScene.SendMessage.ViewModel)
    func closeAppointmentDetails()
}

class AppointmentDetailsPresenter: AppointmentDetailsPresenterInput {

    typealias FetchAppointmentDetails = AppointmentDetailsScene.FetchAppointmentDetails
    
    weak var output: AppointmentDetailsPresenterOutput?
    
    // MARK: Presentation logic

    func presentFetchedAppointment(response: FetchAppointmentDetails.Response) {
        let viewModel = mapResponseToViewModel(response: response)
        output?.presentFetchedAppointment(viewModel: viewModel)
    }

    func toggleTaskButton(response: AppointmentDetailsScene.ToggleTask.Response) {
        let viewModel =  AppointmentDetailsScene.ToggleTask.ViewModel(index: response.index)
        output?.toggleTaskButton(viewModel: viewModel)
    }

    func makeCall(response: AppointmentDetailsScene.MakeCall.Response) {
        let url = URL(string: "tel://\(response.phoneNumber)")
        if let url = url,
           UIApplication.shared.canOpenURL(url) {
            let viewModel = AppointmentDetailsScene.MakeCall.ViewModel(url: url)
            output?.makeCall(viewModel: viewModel)
        }
    }

    func sendMessage(response: AppointmentDetailsScene.SendMessage.Response) {

        var message: String

        switch response.messageType {
        case .isReady:
            message = String(format: NSLocalizedString("ready-message", comment: "Message informing that pet is ready"),
                             response.petName)
        case .willBeReadyIn:
            message = String(format: NSLocalizedString("will-be-ready-message", comment: "Message informing that pet is will be ready in given time"),
                             response.petName,
                             response.minutes ?? "")
        }

        let viewModel = AppointmentDetailsScene.SendMessage.ViewModel(phoneNumber: response.phoneNumber, message: message)
        output?.sendMessage(viewModel: viewModel)
    }

    func closeAppointmentDetails() {
        output?.closeAppointmentDetails()
    }
}

// MARK: FetchAppointmentDetails

private extension AppointmentDetailsPresenter {

    typealias Response = FetchAppointmentDetails.Response
    typealias ViewModel = FetchAppointmentDetails.ViewModel

    func mapResponseToViewModel(response: Response) -> ViewModel {
        let overviewViewModel = mapResponseToOverview(response: response)
        let packageViewModel = mapResponseToPackage(response: response)
        let tasksViewModel = mapResponseToTasks(response: response)
        let notesViewModel = mapResponseToNotes(response: response)
        return ViewModel(overview: overviewViewModel,
                         package: packageViewModel,
                         tasks: tasksViewModel,
                         notes: notesViewModel)
    }

    func mapResponseToOverview(response: Response) -> ViewModel.Overview {
        let appointment = response.appointment
        let appointmentDetails = response.appointmentDetails
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "d MMM (E)"
        let timeFormatter = DateFormatter()
        timeFormatter.dateFormat = "HH:mm"

        let dateString = dateFormatter.string(from: appointment.startDate ?? Date())
        let startTime = timeFormatter.string(from: appointment.startDate ?? Date())
        let endTime = timeFormatter.string(from: appointment.endDate ?? Date())
        let timeString = startTime + " - " + endTime
        let ageString = appointment.age?.mapToLocalizedAgeString()
        let weightString = appointment.weight?.mapToLocalizedWeightString()

        return ViewModel.Overview(appointmentImage: appointment.image,
                                  petName: appointment.name ?? "",
                                  date: dateString,
                                  time: timeString,
                                  weight: weightString ?? "",
                                  age: ageString ?? "",
                                  breed: appointmentDetails.breed ?? "",
                                  phoneNumber: appointmentDetails.phoneNumber ?? "")
    }

    func mapResponseToPackage(response: Response) -> ViewModel.Package {
        let package = response.appointmentDetails.package

        return ViewModel.Package(name: package?.name ?? "")
    }

    func mapResponseToTasks(response: Response) -> ViewModel.Tasks {

        let tasks = mapTasksToDisplayedTasks(tasks: response.appointmentDetails.package?.tasks ?? [])

        return ViewModel.Tasks(tasks: tasks)
    }

    func mapTasksToDisplayedTasks(tasks: [Task]) -> [ViewModel.Tasks.DisplayedTask] {
        return tasks.map { ViewModel.Tasks.DisplayedTask(id: $0.id ?? "", name: $0.name ?? "", isCompleted: $0.isCompleted) }
    }

    func mapResponseToNotes(response: Response) -> ViewModel.Notes {
        let appointmentDetails = response.appointmentDetails

        return ViewModel.Notes(notes: appointmentDetails.notes ?? "")
    }
}
