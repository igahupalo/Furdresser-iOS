//
//  AppointmentDetailsViewController.swift
//  Furdresser
//
//  Created by Iga Hupalo on 24/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit
import MessageUI
import StatusAlert

protocol AppointmentDetailsViewControllerDelegate: AnyObject {
    func reloadAppointments()
}

protocol AppointmentDetailsViewControllerInput {
    
}

protocol AppointmentDetailsViewControllerOutput {
    func fetchAppointmentDetails()
    func toggleTask(request: AppointmentDetailsScene.ToggleTask.Request)
    func makeCall()
    func sendMessage(request: AppointmentDetailsScene.SendMessage.Request)
    func cancelAppointment()
}

class AppointmentDetailsViewController: UIViewController, AppointmentDetailsViewControllerInput {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!

    var output: AppointmentDetailsViewControllerOutput?
    var router: AppointmentDetailsRouter?

    weak var delegate: AppointmentDetailsViewControllerDelegate?

    var cellFactory: AppointmentDetailsCellFactoryProtocol?

    private var tasks: [AppointmentDetailsScene.FetchAppointmentDetails.ViewModel.Tasks.DisplayedTask] = []
    private var toggledTaskIndexPath: IndexPath?

    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        AppointmentDetailsConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        fetchAppointmentDetails()
        cellFactory = AppointmentDetailsCellFactory(tableView: tableView,
                                                    taskDelegate: self,
                                                    overviewDelegate: self)
        tableView.isHidden = true
    }

    // MARK: Display logic

    func presentFetchedAppointment(viewModel: AppointmentDetailsScene.FetchAppointmentDetails.ViewModel) {
        cellFactory?.viewModel = viewModel
        tasks = viewModel.tasks.tasks
        tableView.reloadData()
        activityIndicator.stopAnimating()
        tableView.isHidden = false
    }

    func toggleTaskButton(viewModel: AppointmentDetailsScene.ToggleTask.ViewModel) {
        if let toggledTaskIndexPath = toggledTaskIndexPath {
            (tableView.cellForRow(at: toggledTaskIndexPath) as? TaskTableViewCell)?.button.toggle()
        }
        self.toggledTaskIndexPath = nil
    }

    func makeCall(viewModel: AppointmentDetailsScene.MakeCall.ViewModel) {
        UIApplication.shared.open(viewModel.url, options: [:], completionHandler: nil)
    }

    func sendMessage(viewModel: AppointmentDetailsScene.SendMessage.ViewModel) {
        let messageViewController = MFMessageComposeViewController()

        messageViewController.body = viewModel.message
        messageViewController.recipients = [viewModel.phoneNumber]
        messageViewController.messageComposeDelegate = self

        present(messageViewController, animated: true, completion: nil)
    }

    func closeAppointmentDetails() {
        delegate?.reloadAppointments()
        router?.navigateBack()
    }
}

extension AppointmentDetailsViewController: MFMessageComposeViewControllerDelegate {
    func messageComposeViewController(_ controller: MFMessageComposeViewController, didFinishWith result: MessageComposeResult) {
        let statusAlert = StatusAlert()
        statusAlert.canBePickedOrDismissed = true
        if let font = UIFont(name: "Nunito-Bold", size: 24) {
            statusAlert.appearance.titleFont = font
        }

        switch (result.rawValue) {
        case MessageComposeResult.failed.rawValue:
            self.dismiss(animated: true) {
                statusAlert.image = UIImage(systemName: "xmark.circle")
                statusAlert.title = "Sending failed"
                statusAlert.showInKeyWindow()
            }
        case MessageComposeResult.sent.rawValue:
            self.dismiss(animated: true) {
                statusAlert.image = UIImage(systemName: "checkmark.circle")
                statusAlert.title = "Message sent"
                statusAlert.showInKeyWindow()
            }
        case MessageComposeResult.cancelled.rawValue:
            self.dismiss(animated: true, completion: nil)
        default:
            break
        }
    }
}

extension AppointmentDetailsViewController: TaskDelegate {
    func didToggleTaskAt(indexPath: IndexPath) {
        let request = AppointmentDetailsScene.ToggleTask.Request(index: indexPath.row)
        toggledTaskIndexPath = indexPath
        output?.toggleTask(request: request)
    }
}

extension AppointmentDetailsViewController: OverviewDelegate {
    func didTapCallButton() {
        output?.makeCall()
    }

    func didTapSendButton() {
        let alert = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)

        alert.addAction(UIAlertAction(title: NSLocalizedString("is-ready", comment: ""), style: .default, handler: { [weak self] _ in self?.sendTextMessage(messageType: .isReady) }))

        alert.addAction(UIAlertAction(title: NSLocalizedString("will-be-ready-in", comment: ""), style: .default, handler: { [weak self] _ in
            let title = NSLocalizedString("provide-time", comment: "")
            let minNumberAlert = UIAlertController(title: title, message: nil, preferredStyle: .alert)
            minNumberAlert.addTextField(configurationHandler: { textField in
                let placeholder = NSLocalizedString("minutes", comment: "")
                textField.placeholder = placeholder
                textField.keyboardType = .numberPad
            })

            minNumberAlert.addAction(UIAlertAction(title: NSLocalizedString("ok", comment: ""), style: .default, handler: { [weak self] _ in
                self?.sendTextMessage(messageType: .willBeReadyIn, minutes: minNumberAlert.textFields?.first?.text)
            }))
            minNumberAlert.addAction(UIAlertAction(title: NSLocalizedString("cancel", comment: "Cancel"), style: .cancel, handler: nil))

            self?.present(minNumberAlert, animated: true)
        }))


        alert.addAction(UIAlertAction(title: NSLocalizedString("cancel", comment: "Cancel"), style: .cancel, handler: nil))

        self.present(alert, animated: true)
    }

    func didTapCancelButton() {
        let alert = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        alert.addAction(UIAlertAction(title: NSLocalizedString("cancel-appointment", comment: "Cancel appintment"), style: .destructive, handler: { [weak self] _ in self?.output?.cancelAppointment() }))
        alert.addAction(UIAlertAction(title: NSLocalizedString("cancel", comment: "Cancel"), style: .cancel, handler: nil))

        self.present(alert, animated: true)
    }
}

private extension AppointmentDetailsViewController {

    func sendTextMessage(messageType: AppointmentDetailsScene.SendMessage.MessageType, minutes: String? = nil) {
        let request = AppointmentDetailsScene.SendMessage.Request(messageType: messageType, minutes: minutes)
        output?.sendMessage(request: request)
    }

    // MARK: Requests

    func fetchAppointmentDetails() {
        output?.fetchAppointmentDetails()
    }
}

//This should be on configurator but for some reason storyboard doesn't detect ViewController's name if placed there

extension AppointmentDetailsViewController: AppointmentDetailsPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}

extension AppointmentDetailsViewController: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        cellFactory?.numberOfSections() ?? 0
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        cellFactory?.numberOfRows(for: section) ?? 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        return cellFactory?.cellForRowAt(indexPath: indexPath) ?? UITableViewCell()
    }
}
