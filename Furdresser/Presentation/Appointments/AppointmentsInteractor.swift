//
//  AppointmentsInteractor.swift
//  Furdresser
//
//  Created by Iga Hupalo on 24/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import Foundation

protocol AppointmentsInteractorInput {
    
}

protocol AppointmentsInteractorOutput {
    func presentFetchedAppointments(response: AppointmentsScene.FetchAppointments.Response)
    func setDisplayMode(response: AppointmentsScene.ProvideDisplayMode.Response)
}

protocol AppointmentsDataSource {
    
}

protocol AppointmentsDataDestination {
    
}

class AppointmentsInteractor: AppointmentsInteractorInput, AppointmentsDataSource, AppointmentsDataDestination {
    
    var output: AppointmentsInteractorOutput?
    var user: User?

    var sectionedUserAppointments: [[Appointment]]?
    var sectionedAllAppointments: [[Appointment]]?

    var selectedAppointment: Appointment?

    private let numberOfDaysInAdvance = 3

    // MARK: Business logic
    
    func fetchAppointments() {
        let appointmentsWorker = AppointmentsWorker()

        let dispatchGroup = DispatchGroup()

        var groupedUserAppointments: [(Date, [Appointment])]?
        var groupedAllAppointments: [(Date, [Appointment])]?

        if let uid = user?.uid {
            dispatchGroup.enter()
            appointmentsWorker.fetchUserAppointments(uid: uid, numberOfDaysInAdvance: numberOfDaysInAdvance) { [weak self] appointments in
                if let appointments = appointments {
                    groupedUserAppointments = appointmentsWorker.groupAppointmentsByDay(appointments: appointments)
                    self?.sectionedUserAppointments = groupedUserAppointments?.map { $0.1 }
                    dispatchGroup.leave()
                }
            }
        }

        if user?.role == .manager {
            dispatchGroup.enter()
            appointmentsWorker.fetchAllAppointments {[weak self] appointments in
                if let appointments = appointments {
                    groupedAllAppointments = appointmentsWorker.groupAppointmentsByDay(appointments: appointments)
                    self?.sectionedAllAppointments = groupedAllAppointments?.map { $0.1 }
                    dispatchGroup.leave()
                }
            }

        }

        dispatchGroup.notify(queue: .main) {
            let response = AppointmentsScene.FetchAppointments.Response(groupedUserAppointments: groupedUserAppointments ?? [],
                                                                        groupedAllAppointments: groupedAllAppointments)
            self.output?.presentFetchedAppointments(response: response)
        }
    }

    func setSelectedUserAppointment(request: AppointmentsScene.SetSelectedAppointment.Request) {
        selectedAppointment = sectionedUserAppointments?[request.indexPath.section][request.indexPath.row]
    }

    func setSelectedWorkerAppointment(request: AppointmentsScene.SetSelectedAppointment.Request) {
        selectedAppointment = sectionedAllAppointments?[request.indexPath.section][request.indexPath.row]

    }

    func provideDisplayMode() {
        output?.setDisplayMode(response: AppointmentsScene.ProvideDisplayMode.Response(role: user?.role ?? .groomer))
    }
}
