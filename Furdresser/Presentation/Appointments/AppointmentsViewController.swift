//
//  AppointmentsViewController.swift
//  Furdresser
//
//  Created by Iga Hupalo on 24/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import UIKit

protocol AppointmentsViewControllerInput {
    
}

protocol AppointmentsViewControllerOutput {
    func fetchAppointments()
    func setSelectedUserAppointment(request: AppointmentsScene.SetSelectedAppointment.Request)
    func setSelectedWorkerAppointment(request: AppointmentsScene.SetSelectedAppointment.Request)
    func provideDisplayMode()
}

class AppointmentsViewController: UIViewController, AppointmentsViewControllerInput {

    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!

    var output: AppointmentsViewControllerOutput?
    var router: AppointmentsRouter?

    private var userSectionHeaders: [String] = []
    private var userSectionedAppointments: [[AppointmentsScene.FetchAppointments.ViewModel.DisplayedAppointment]] = []

    private var allSectionHeaders: [String] = []
    private var allSectionedAppointments: [[AppointmentsScene.FetchAppointments.ViewModel.DisplayedAppointment]] = []

    private var selectedAppointmentIndexPath: IndexPath?
    private var displayMode = AppointmentsScene.ProvideDisplayMode.ViewModel.DisplayMode.groomer

    private var segmentedControl: UISegmentedControl?
    private var currentSegment: Int = 0

    // MARK: Object lifecycle
    
    override func awakeFromNib() {
        super.awakeFromNib()
        AppointmentsConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        output?.provideDisplayMode()
    }
    
    // MARK: Display logic

    func presentFetchedAppointments(viewModel: AppointmentsScene.FetchAppointments.ViewModel) {
        userSectionHeaders = viewModel.userSectionHeaders
        userSectionedAppointments = viewModel.userSectionedAppointments

        tableView.reloadData()

        if tableView.refreshControl?.isRefreshing == true {
            DispatchQueue.main.async { [weak self] in
                self?.tableView.refreshControl?.endRefreshing()
            }
        }

        if activityIndicator.isAnimating {
            activityIndicator.stopAnimating()
            tableView.isHidden = false
        }

    }

    func setupDisplayMode(viewModel: AppointmentsScene.ProvideDisplayMode.ViewModel) {
        displayMode = viewModel.displayMode
        if displayMode == .manager {
            setupSegmentedControl()
        }
        reloadTableView()
    }
}

extension AppointmentsViewController: AppointmentsPresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router?.passDataToNextScene(for: segue)
    }
}

extension AppointmentsViewController: AppointmentDetailsViewControllerDelegate {
    func reloadAppointments() {
        reloadTableView()
    }
}


extension AppointmentsViewController: AppointmentPreviewDelegate {
    func didSelectUserAppointmentAt(indexPath: IndexPath) {
        selectedAppointmentIndexPath = indexPath
        let request = AppointmentsScene.SetSelectedAppointment.Request(indexPath: indexPath)
        output?.setSelectedUserAppointment(request: request)
    }
}

extension AppointmentsViewController: GroomerAppointmentPreviewDelegate {
    func didSelectWorkerAppointmentAt(indexPath: IndexPath) {
        selectedAppointmentIndexPath = indexPath
        let request = AppointmentsScene.SetSelectedAppointment.Request(indexPath: indexPath)
        output?.setSelectedWorkerAppointment(request: request)
    }
}


private extension AppointmentsViewController {
    func setupUI() {
        tableView.refreshControl = UIRefreshControl()
        tableView.refreshControl?.tintColor = UIColor(named: "Primary")
        tableView.refreshControl?.addTarget(self, action: #selector(handleRefreshControl), for: .valueChanged)
    }

    func setupSegmentedControl() {
        let titles = [NSLocalizedString("all", comment: "All"),
                      NSLocalizedString("mine", comment: "Mine")]

        segmentedControl = UISegmentedControl(items: titles)

        if let normalFont = UIFont(name: "Nunito-Regular", size: 14),
           let selectedFont = UIFont(name: "Nunito-Bold", size: 14) {
            segmentedControl?.setTitleTextAttributes([NSAttributedString.Key.font: normalFont], for: .normal)
            segmentedControl?.setTitleTextAttributes([NSAttributedString.Key.font: selectedFont], for: .selected)
        }

        for index in 0...titles.count - 1 {
            segmentedControl?.setWidth((view.bounds.width - 32) / CGFloat(titles.count), forSegmentAt: index)
        }

        segmentedControl?.sizeToFit()
        segmentedControl?.addTarget(self, action: #selector(handleSegmentChanged), for: .valueChanged)
        segmentedControl?.selectedSegmentIndex = 0
        segmentedControl?.sendActions(for: .valueChanged)
        navigationItem.titleView = segmentedControl
    }

    @objc
    func handleRefreshControl() {
        fetchAppointments()
    }

    @objc
    func handleSegmentChanged() {
        currentSegment = segmentedControl?.selectedSegmentIndex ?? 0
        tableView.reloadData()
    }

    func reloadTableView() {
        if let indexPath = selectedAppointmentIndexPath {
            tableView.deselectRow(at: indexPath, animated: false)
        }

        fetchAppointments()
        activityIndicator.startAnimating()
        activityIndicator.isHidden = false
        tableView.isHidden = true
    }

    // MARK: Requests

    func fetchAppointments() {
        output?.fetchAppointments()
    }
}

extension AppointmentsViewController: UITableViewDelegate,
                                     UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if displayMode == .manager && currentSegment == 0 {
            return allSectionedAppointments[section].count
        } else {
            return userSectionedAppointments[section].count
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        if displayMode == .manager && currentSegment == 0 {
            let identifier = GroomerAppointmentPreviewTableViewCell.defaultIdentifier()
            let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! GroomerAppointmentPreviewTableViewCell

            cell.setup(viewModel: allSectionedAppointments[indexPath.section][indexPath.row],
                       indexPath: indexPath,
                       delegate: self)

            return cell
        } else {
            let identifier = AppointmentPreviewTableViewCell.defaultIdentifier()
            let cell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! AppointmentPreviewTableViewCell

            cell.setup(viewModel: userSectionedAppointments[indexPath.section][indexPath.row],
                       indexPath: indexPath,
                       delegate: self)

            return cell
        }
    }

    func numberOfSections(in tableView: UITableView) -> Int {
        if displayMode == .manager && currentSegment == 0 {
            return allSectionHeaders.count
        } else {
            return userSectionHeaders.count
        }

    }

    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView(frame: CGRect(x: 0, y: 0, width: tableView.frame.width, height: 24))
        let label = UILabel(frame: CGRect(x: 16, y: 4, width: tableView.frame.width - 16, height: 24))

        view.backgroundColor = .white
        label.font = UIFont(name: "Nunito-Bold", size: 16)
        label.textColor = UIColor(named: "Primary")

        if displayMode == .manager && currentSegment == 0 {
            label.text = allSectionHeaders[section]
        } else {
            label.text = userSectionHeaders[section]
        }

        view.addSubview(label)
        return view
    }

    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        30
    }
}
