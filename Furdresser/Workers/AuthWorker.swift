//
//  AuthenticationWorker.swift
//  Furdresser
//
//  Created by Iga Hupalo on 25/05/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift HELM Xcode Templates
//  https://github.com/HelmMobile/clean-swift-templates

import Firebase
import FirebaseAuth
import FirebaseFirestore

class AuthWorker {

    enum ValidationResult {
        case valid
        case empty
        case invalid
    }

    enum AuthError {
        case wrongPassword
        case otherError
    }

    func isValidEmail(email: String?) -> (ValidationResult) {
        if let email = email, !email.isEmpty {
            let emailRegEx = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,64}"
            let emailPredicate = NSPredicate(format: "SELF MATCHES %@", emailRegEx)
            if !emailPredicate.evaluate(with: email) {
                return(.invalid)
            }
            return (.valid)
        }
        return (.empty)
    }

    func isValidPassword(password: String?) -> (ValidationResult) {
        if let password = password, !password.isEmpty {
            return (.valid)
        }
        return (.empty)
    }

    func logIn(email: String, password: String, completionHandler: @escaping ((_ errorCode: AuthError?) -> ())) {
        if Auth.auth().currentUser == nil {
            Auth.auth().signIn(withEmail: email, password: password, completion: {(authResult, error) in
                if let error = error as NSError? {
                    switch AuthErrorCode(rawValue: error.code) {
                    case .wrongPassword:
                        completionHandler(.wrongPassword)
                    default:
                        completionHandler(.otherError)
                    }
                } else {
                    completionHandler(nil)
                }
            })
        }
    }

    func logOut() {
        do {
            try Auth.auth().signOut()
        } catch {
            print("Failed to sign out.")
        }
    }

    func fetchCurrentUser(completionHandler: @escaping (User?) -> ()) {
        let db: Firestore = Firestore.firestore()

        if let currentUser = Auth.auth().currentUser {
            db.collection("Salons")
                .document(Constants.salonId)
                .collection("Workers")
                .document(currentUser.uid)
                .getDocument { documentSnapshot, error in
                    guard error == nil && documentSnapshot != nil else {
                        print("Failed to fetch current user.")
                        completionHandler(nil)
                        return
                    }

                    if let data = documentSnapshot?.data() {
                        let user = User(dict: data)
                        user.uid = currentUser.uid
                        completionHandler(user)
                    }
                }
        } else {
            completionHandler(nil)
        }
    }
}
